{{template "base/head_new" .}}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload YAML Files</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <style>
        #editor1, #editor2 {
            width: 100%;
            min-height: 500px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
        }

        #status {
            padding: 10px;
            color: white;
            font-weight: bold;
            border-radius: 5px;
            width: fit-content;
        }
        .green {
            background-color: green;
        }
        .red {
            background-color: red;
        }
        #output {
            height: 780px; /* Set a fixed height for the output container */
            overflow-y: scroll; /* Enable vertical scrolling */
            font-size: 20px;
        }
    </style>
</head>
<body>

    <div role="main" aria-label="{{.Title}}" class="page-content main-content ui">

    <a href="{{AppSubUrl}}/ria"><button>Home</button></a>

    <p id="status" class="status">Loading...</p>

    <h1>Upload YAML Files</h1>
    <form id="uploadForm" enctype="multipart/form-data">
        <label for="file1">Upload Config File:</label>
        <input type="file" id="file1" name="config_file" accept=".yaml,.yml"><br>
        <div id="editor1">Enter YAML content for Config File</div>

        <label for="file2">Upload Train Default File:</label>
        <input type="file" id="file2" name="train_default_file" accept=".yaml,.yml"><br>
        <div id="editor2">Enter YAML content for Train Default File</div>

        <button type="submit" id="uploadBtn">Upload Files</button>
    </form>

    <button id="submitBtn">Start RIA Handler</button>

    <div id="output"></div>

    </div>

    <script>
        var editor1 = ace.edit("editor1");
        editor1.setTheme("ace/theme/monokai");
        editor1.getSession().setMode("ace/mode/yaml");
        editor1.setValue(`# this example makes a training dataset, and an inference dataset, augments the training dataset, does an HPO run, trains a model, then tests on a new harder dataset it all in one go. 
# todo - add impairment/diversity engine in curator step

1:
    module: 'QDM'
    command: 'ui_handler'
    module_path: True
    args: '-s 400 -l 128 -r -5 16 5 -d digital_mods_hpo.dat digital -c bpsk qpsk gfsk qam16'
    post-tasks: ''
    exclude_from_websocket: false
1.1:
    module: 'QDM'
    command: 'ui_handler'
    module_path: True
    args: '-s 200 -l 128 -r -8 18 3 -d digital_mods_test.dat digital -c bpsk qpsk gfsk qam16'
    post-tasks: ''
    exclude_from_websocket: false
2:
    module: 'QDM/recording_curation/curator'
    module_path: True
    command: 'curator'
    args: '-sdf ./dataset_files/digital_mods_hpo.dat -a 600 -t ./dataset_files/digital_mods_train_aug.dat'
    post-tasks: ''
    exclude_from_websocket: true
3:
    module: 'QMB'
    command: 'preprocess'
    args: '-d ./dataset_files/digital_mods_hpo.dat -s 0.9 -c ./QMB/signal_classification/train-default.yaml'
    post-tasks: "" #'mv signal_classification/signal_dataset/ ./QMB/signal_classification/'
    exclude_from_websocket: false
3.1:
    module: 'QMB'
    module_path: True
    command: 'signal_classification.hyperparameter_optimization.constrained_hyperparam_tuning'
    args: '--config_file ./QMB/signal_classification/hyperparameter_optimization/hpo_config.yaml --n_trials 1000 --timeout 4 --sample_pct 0.2'
    post-tasks: 'ls ./QMB/signal_classification/hyperparameter_optimization/results/'
    exclude_from_websocket: false
3.2:
    module: 'QMB'
    command: 'yaml_updater'
    args: ' -s ./QMB/signal_classification/train-default.yaml -t ./QMB/signal_classification/train-tuned.yaml -r ./signal_classification/hyperparameter_optimization/results/'
    post-tasks: 'ls ./QMB/signal_classification/*.yaml'
    exclude_from_websocket: false
3.28:
    module: ''
    command: ''
    args: ''
    post-tasks: 'mv ./signal_classification/signal_dataset/ ./signal_classification/hpo_dataset/'
    exclude_from_websocket: false
3.29:
    module: 'QMB'
    command: 'preprocess'
    args: '-d ./dataset_files/digital_mods_train_aug.dat -s 0.7 -c ./QMB/signal_classification/train-default.yaml'
    post-tasks: "" #'mv signal_classification/signal_dataset/ ./QMB/signal_classification/'
    exclude_from_websocket: false
3.3:
    module: 'QMB'
    module_path: True
    command: 'signal_classification.train'
    args: '--config_file ./QMB/signal_classification/train-tuned.yaml'
    post-tasks: ''
    exclude_from_websocket: false
3.31:
    module: ''
    command: ''
    args: ''
    post-tasks: "mv ./label_encoder/* ./model_files/"
    exclude_from_websocket: false
3.32:
    module: ''
    command: ''
    args: ''
    post-tasks: 'mv ./models/* ./model_files/'
    exclude_from_websocket: false
3.33:
    module: ''
    command: ''
    args: ''
    post-tasks: 'cp ./QMB/signal_classification/train-tuned.yaml ./model_files/resnet_bs256.yaml'
    exclude_from_websocket: false
3.34:
    module: ''
    command: ''
    args: ''
    post-tasks: 'rm -rf ./models/ ./label_encoder/'
    exclude_from_websocket: false
3.35:
    module: ''
    command: ''
    args: ''
    post-tasks: 'mv ./signal_classification/signal_dataset/ ./signal_classification/training_dataset/'
    exclude_from_websocket: false
4:
    module: 'QMT'
    command: 'preprocess'
    args: '-d ./dataset_files/digital_mods_test.dat -s 0.1 -c ./QMT/train-default.yaml'
    post-tasks: 'stat signal_classification/signal_dataset/'
    exclude_from_websocket: false
4.1:
    module: 'QMT'
    command: 'tester'
    module_path: True
    args: '-c ./model_files/resnet_bs256.yaml'
    post-tasks: ''
    exclude_from_websocket: false

4.2:
    module: 'QMT'
    command: 'inference_loop_module'
    module_path: True
    args: '-c ./model_files/resnet_bs256.yaml'
    post-tasks: ''
    exclude_from_websocket: false

5:
    module: None
    command: None
    args: None
    post-tasks: 'echo "RIA execution complete!"'
    exclude_from_websocket: false

6:
    module: ''
    command: ''
    args: ''
    post-tasks: 'rm -rf signal_classification'
`)

        var editor2 = ace.edit("editor2");
        editor2.setTheme("ace/theme/monokai");
        editor2.getSession().setMode("ace/mode/yaml");
        editor2.setValue(`data:
  x_train: "./signal_classification/signal_dataset/train/x_train.npy"
  y_train: "./signal_classification/signal_dataset/train/y_train.npy"
  x_val: "./signal_classification/signal_dataset/test/x_test.npy"
  y_val: "./signal_classification/signal_dataset/test/y_test.npy"

learner:
  model: "resnet"
  optimizer: "rangeradabelief"
  fit_function: "fit_fc"
  suffix: "bs256"
  mixup: True
  fp16: True 
  n_epochs: 5
  bs: 128
  lr: 3e-4
  pct_start: 0.3
  beta1: 0.95
  beta2: 0.999
  wd: 1e-2
  eps: 1e-8
  patience: 10 # patience for early stopping
  # min_loss_perc: 1. # removed for now, not using
  # pretrained_weights: # path to pretrained weights, a .pth file

# model specific configs
resnet:
  layers: 
    - 3
    - 4
    - 6
    - 3
  groups: 1 # groups = 1 for standard resnet or 32 or resnext
  width_per_group: 64 # groups = 64 for standard resnet or 4 for resnext
  reduction: 16 # intermediate channel size for SE module (None to not use SE)
  self_attention: True
  expansion: 4 # either 1 or 4. if ==4, use bottleneck resblock

inception:
  reduction: 16 # intermediate channel size for SE module
  self_attention: True 
  attn_layer: 2
  
ts_transformer:
  n_layers: 1
  d_model: 256
  learn_pe: True
  pe: sincos
  res_dropout: 0.
  fc_dropout: 0.
  
mlp_mixer:
  patch_size: 64
`)

    document.getElementById('uploadForm').addEventListener('submit', function (event) {
        event.preventDefault();

        var formData = new FormData(this);

        // If both files are not uploaded, use content from Ace editors
        if (!document.getElementById('file1').files.length && document.getElementById('file2').files.length) {
            alert("Please upload config file.");
        } else if (document.getElementById('file1').files.length && !document.getElementById('file2').files.length) {
            alert("Please upload train default file.");
        } else if (document.getElementById('file1').files.length && document.getElementById('file2').files.length) {
            fetch('http://192.168.0.12:8000/run-instruction/', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error:', error);
                alert("There was an error uploading the file.");
            });  
        } else {
            formData.append('config_file', new Blob([editor1.getValue()], { type: 'text/yaml' }), 'config_file.yaml');
            formData.append('train_default_file', new Blob([editor2.getValue()], { type: 'text/yaml' }), 'train_default_file.yaml');
        
            fetch('http://192.168.0.106:8000/receive-files/', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error:', error);
                alert("There was an error uploading the file.");
            });   
        }
    });

    const submitBtn = document.getElementById('submitBtn');

    submitBtn.addEventListener('click', function() {
        const socket = new WebSocket('ws://192.168.0.106:8000/ws-run-instruction/');
        const outputDiv = document.getElementById('output');

        // Handle WebSocket open event
        socket.addEventListener('open', function (event) {
            console.log('WebSocket connected');
        });

        socket.onmessage = function(event) {
            const message = JSON.parse(event.data);
            if (message.type === 'command') {
                outputDiv.innerHTML += `<p style="color: green;">${message.content}</p>`;
            } else if (message.type === 'output') {
                outputDiv.innerHTML += `<p>${message.content}</p>`;
            } else if (message.type === 'instruction') {
                outputDiv.innerHTML += `<p style="color: blue;">${message.content}</p>`;
            } else if (message.type === 'error') {
                outputDiv.innerHTML += `<p style="color: red;">${message.content}</p>`;
            } else if (message.type === 'message') {
                outputDiv.innerHTML += `<p>${message.content}</p>`;
            }
            // Scroll to the bottom of the output container
            outputDiv.scrollTop = outputDiv.scrollHeight;
        };

        socket.onerror = function(error) {
            outputDiv.innerHTML += `<p style="color: red;">WebSocket error: ${error}</p>`;
        };

        socket.onclose = function(event) {
            outputDiv.innerHTML += "<p>WebSocket connection closed.</p>";
        };

        const statusDiv = document.getElementById('status');
        const ws_status = new WebSocket('ws://192.168.0.106:8000/status/');

        console.log(ws_status)

        ws_status.onopen = function(event) {
            statusDiv.textContent = 'Connected';
        };

        ws_status.onclose = function(event) {
            statusDiv.textContent = 'Not Connected';
        };

        ws_status.onerror = function(event) {
            statusDiv.textContent = 'WebSocket error occurred';
        };
    });

    const statusDiv = document.getElementById('status');
    const ws_status = new WebSocket('ws://192.168.0.106:8000/status/');

    ws_status.onopen = function(event) {
        statusDiv.textContent = 'Connected';
    };

    ws_status.onclose = function(event) {
        statusDiv.textContent = 'Not Connected, refresh to reconnect';
    };

    ws_status.onerror = function(event) {
        statusDiv.textContent = 'WebSocket error occurred';
    };
    </script>
</body>

{{template "base/footer" .}}