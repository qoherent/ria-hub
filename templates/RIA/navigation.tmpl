{{template "base/head_new" .}}

<style>

    #status {
        padding: 10px;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        width: fit-content;
    }
    .green {
        background-color: green;
    }
    .red {
        background-color: red;
    }
    .yellow {
        background-color: yellow;
    }
    #output {
        height: 780px; /* Set a fixed height for the output container */
        overflow-y: scroll; /* Enable vertical scrolling */
        font-size: 20px;
    }
        .terminal {
            display: none;
            margin-top: 5vh;
            width: 70%;
            height: 300px;
            min-height: 200px;
            max-height: 700px;
            background-color: #000000;
            padding: 20px;
            border-radius: 10px;
            overflow-y: auto;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            margin: auto;
            margin-top: 5vh;
            margin-bottom: 5vh;
            padding-bottom: 5vh;
            resize: vertical;
        }
        .terminal-show {
            display: block;
        }
        .terminal p {
            margin: 0;
            line-height: 1.5;
        }

        .terminal p.command {
            color: green;
        }

        .terminal p.output {
            color: white;
        }

        .terminal p.instruction {
            color: blue;
        }

        .terminal p.error {
            color: red;
        }

        .terminal p.message {
            color: white;
        }
</style>

<div role="main" aria-label="{{.Title}}" class="page-content main-content ui">

    <p id="status" class="status">Loading...</p>

	<a id="submitDefault"><button>Submit default</button></a>
    <a href="config"><button>Edit Config File only</button></a>
    <a href="train"><button>Edit Train Default File only</button></a>
    <a href="both"><button>Edit both</button></a>

    <div id="terminal" class="terminal"></div>

</div>

<script>
    const terminalDiv = document.getElementById('terminal');
    const submitBtn = document.getElementById('submitDefault');

    submitBtn.addEventListener('click', function() {
        const terminalDiv = document.getElementById('terminal');
        const socket = new WebSocket('ws://192.168.0.106:8000/ws-run-instruction/');
        terminalDiv.classList.add('terminal-show');
        let messageElement = document.createElement('p');
        messageElement.className = 'instruction';
        messageElement.textContent = 'Connecting...'
        terminalDiv.appendChild(messageElement)

        // Handle WebSocket open event
        socket.addEventListener('open', function (event) {
            window.scrollTo({
                top: document.body.scrollHeight,
                behavior: 'smooth' 
            });
            let messageElement = document.createElement('p');
            messageElement.className = 'command';
            messageElement.textContent = 'Connected'
            terminalDiv.appendChild(messageElement)
        });

        socket.addEventListener('close', function (event) {
            window.scrollTo({
                top: document.body.scrollHeight,
                behavior: 'smooth' 
            });
            let messageElement = document.createElement('p');
            messageElement.className = 'command';
            messageElement.textContent = 'WebSocket connection is closed, to run RIA Handler, make sure the server is up by checking the status at the top then click the "Start RIA Handler" button'
            terminalDiv.appendChild(messageElement)
        });


        socket.onmessage = function(event) {
        const message = JSON.parse(event.data);
        let messageElement = document.createElement('p');

        if (message.type === 'command') {
            messageElement.className = 'command';
        } else if (message.type === 'output') {
            messageElement.className = 'output';
        } else if (message.type === 'instruction') {
            messageElement.className = 'instruction';
        } else if (message.type === 'error') {
            messageElement.className = 'error';
        } else if (message.type === 'message') {
            messageElement.className = 'message';
        }

        messageElement.textContent = message.content;
        terminalDiv.appendChild(messageElement);

        // Scroll to the bottom of the terminal
        terminalDiv.scrollTo({
            top: terminalDiv.scrollHeight,
            behavior: 'smooth'
        });
        };
    })

    const statusDiv = document.getElementById('status');
    const ws_status = new WebSocket('ws://192.168.0.106:8000/status/');

    ws_status.onopen = function(event) {
        statusDiv.textContent = 'Connected';
        statusDiv.classList.add('green');
    };

    ws_status.onclose = function(event) {
        statusDiv.textContent = 'Not Connected, refresh to reconnect';
        statusDiv.classList.add('red');
    };

    ws_status.onerror = function(event) {
        statusDiv.textContent = 'WebSocket error occurred';
    };
</script>

{{template "base/footer" .}}